{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"watsonx Code Assistant for Z Workshop","text":""},{"location":"#agenda","title":"Agenda","text":"Activity Time Presentation and Demonstration 11:00 am - noon US EST Hands-on, self-paced lab Noon - 5:00 pm US EST"},{"location":"#presentation","title":"Presentation","text":"<ul> <li>Presentation</li> </ul>"},{"location":"#lab","title":"Lab","text":"<ul> <li>Start here with the Understand phase.</li> </ul>"},{"location":"#workshop-environment-architecture","title":"Workshop Environment Architecture","text":"<p>Please visit this page to see the architecture of the workshop's lab environment.</p>"},{"location":"#workshop-owners","title":"Workshop Owners","text":"<ul> <li>Barry Silliman</li> <li>Joel Moss</li> <li>Matt Mondics</li> <li> <p>Garrett Woodworth</p> </li> <li> <p>Email All Workshop Owners</p> </li> </ul>"},{"location":"lab-assignments/","title":"Lab Assignments","text":"<p>WIP</p>"},{"location":"workshop-architecture/","title":"Workshop Architecture Diagram","text":"<p>WIP</p>"},{"location":"labs/refactor/","title":"Refactor Phase","text":""},{"location":"labs/refactor/#refactor-your-cobol-programs-using-refactoring-assistant","title":"Refactor your COBOL Programs using Refactoring Assistant","text":"<p>First, you will access the Refactoring Assistant in your zVA environment.</p> <ol> <li> <p>Open Visual Studio Code (VSCode) from the desktop shortcut on the RDP browser.</p> <p></p> </li> <li> <p>In VSCode at the bottom of the left-side Explorer menu, expand the <code>IBM WATSONX CODE ASSISTANT FOR Z</code> section.</p> <p>You should see a prompt to <code>Enter an API key</code>.</p> <p></p> </li> <li> <p>Navigate to the Desktop of your zVA environment and open the text file named <code>wca4z-key.txt</code>.</p> <p></p> </li> <li> <p>Copy the API key from the text file and navigate back to VSCode.</p> <p></p> </li> <li> <p>Click the prompt to <code>Enter an API key</code>. An input bar will appear in the top-middle of the page. Paste the API key that you just copied from the text file and click enter.</p> <p></p> <p>The <code>Enter an API key</code> prompt should disappear if this was successful.</p> </li> <li> <p>Click the user icon in the bottom-left corner of VSCode, and select the option to <code>Sign in with IBM ADDI to use IBM watsonx Code Assistant for Z Refactoring Assistant</code>.</p> <p></p> <p>A new tab will open in VSCode with a login prompt.</p> </li> <li> <p>Log in with the following credentials:</p> <ul> <li>Email address: <code>dev@wca4z-ra.ibm.com</code></li> <li>Password: <code>password</code></li> </ul> <p></p> <p>After logging in, a new input field will appear in the top-middle of VSCode to select a project.</p> <p></p> </li> <li> <p>Select the <code>GenApp</code> option in this new field.</p> <p>Another new page will open with an option to search for artifacts within the GenApp project. </p> </li> <li> <p>Click the search bar, click the dropdown that currnently says <code>All artifact types</code>, and select <code>CICS transactions</code>.</p> <p></p> </li> <li> <p>From the list of CICS transactions select <code>SSC1</code> and press enter.</p> <p></p> <p>A graph showing the dependencies for the <code>SSC1</code> transaction will appear.</p> <p></p> </li> <li> <p>Click the <code>LGACDB01</code> paragraph to get the flow of its program dependencies.</p> <p></p> </li> <li> <p>Click on the 3 dots associated with the <code>LGACDB01</code> program and select the <code>Identify paragraphs</code> option.</p> <p></p> <p>This will open the COBOL code for the <code>LGACDB01</code> program in VSCode as well as all of the paragraphs in the code sorted in order of importance/complexity in the bottom-left Key Conditions section.</p> <p></p> </li> <li> <p>Optionally, select the <code>INSERT-CUSTOMER</code> paragraph under Key conditions to jump to the paragraph in the <code>LGACDB01</code> program code.</p> <p></p> </li> <li> <p>In the Key Conditions section, right-click the <code>INSERT-CUSTOMER</code> paragraph and select the option to <code>Slice on condition to new service</code>.</p> <p></p> </li> <li> <p>A new input field will appear in the top-middle of VSCode with a prompt to <code>Enter service name</code>.</p> </li> <li> <p>Provide a service name of <code>refactor</code> and press enter.</p> <p></p> </li> <li> <p>The code will be sliced into new service named <code>refactor</code> and will open in a new tab on right side of VSCode. You can close this <code>refactor</code> tab.</p> <p></p> </li> <li> <p>In the left-side menu of VSCode under the <code>refactor</code> folder, find <code>refactor.cbls</code>.</p> </li> <li> <p>Right-click <code>refactor.cbls</code>, hover over the option for <code>watsonx Code Assistant for Z Refactoring Assistant</code> option, and select <code>Generate Service Code</code>.</p> <p></p> </li> <li> <p>A new input field will appear in the top-middle of VSCode prompting you to <code>Enter a service program name</code>. </p> </li> <li> <p>In this field, type <code>LGAOCD01</code> and press Enter.</p> <p></p> <p>A new tab will open with the refactored code, <code>LGAOCD01.cbl</code>.</p> <p></p> <p>If it does not automatically open, double click <code>LGAOCD01.cbl</code> from the left-side menu to open it.</p> </li> </ol> <p>In the Refactor phase, </p> <ol> <li>We used knowledge about our sample application, GenApp, from the Understand phase to select the <code>LGACDB01</code> COBOL program.</li> <li>We used IBM watsonx Code Assistant for Z Refactoring Assistant to refactor the <code>INSERT-CUSTOMER</code> functionality by slicing code <code>LGACDB01</code> into service code.</li> <li>This service code will be used in following Transform phase.</li> </ol>"},{"location":"labs/transform/","title":"Transform Phase","text":""},{"location":"labs/transform/#transform-the-refactored-service-code-from-cobol-to-java","title":"Transform the Refactored Service Code from COBOL to JAVA","text":"<ol> <li> <p>In your zVA instance, open the web browser.</p> <p></p> </li> <li> <p>Click the <code>GitLab</code> bookmark from the bookmarks bar.</p> <p></p> </li> <li> <p>The GitLab page will prompt you for login credentials. Click the <code>Username or primary email</code> field and select the <code>wca4z-git</code> saved credentials.</p> <p></p> <p>After successfully logging in to GitLab, the GitLab Projects page will open. </p> </li> <li> <p>Open the Project named <code>wca4z/COBOLJavaBatch</code>.</p> <p></p> </li> <li> <p>Quickly look through all of the files included in the Project and notice that there are no COBOL components yet.</p> <p></p> </li> <li> <p>Open another new tab in the web browser and click the <code>Jenkins</code> bookmark from the bookmarks bar.</p> <p></p> </li> <li> <p>The Jenkins login page will appear. Select the saved credentials for <code>wca4z-jenkins</code> and log in.</p> <p></p> </li> <li> <p>After successfully logging in, the Jenkins Dashboard will appear with an option named <code>ADDIBuildWCA4ZProject</code>. </p> <p></p> </li> <li> <p>Click <code>ADDIBuildWCA4ZProject</code> and see that no previous jobs have been run.</p> <p></p> </li> <li> <p>Minimize the web browser and navigate back to VSCode. In the far left side of the screen, click the <code>Source Control</code> icon.</p> <p></p> </li> <li> <p>Click the <code>+</code> sign in the Changes section of the VSCode Source Control page to stage the COBOL programs and copybooks.</p> <p>You may need to hover over the Changes line in order for the <code>+</code> sign to appear.</p> <p></p> <p>If done correctly, the changes will move to the Staged Changes section.</p> <p></p> </li> <li> <p>Add a commit message for the changes. E.g., <code>Adjustments after Refactoring in LGACDB01</code>. </p> </li> <li> <p>Click the Commit &amp; Push button.</p> <p></p> </li> <li> <p>A new pop-up will appear prompting you for GitLab credentials. Enter the following and log in.</p> <ul> <li>Username: <code>wca4z-git</code></li> <li>Password: <code>P@assw0rd</code></li> </ul> <p></p> <p>After doing so, your changes should be committed and pushed to the GitLab repository.</p> </li> <li> <p>Navigate back to the Jenkins page in your web browser and refresh the page.</p> </li> <li> <p>You should see a new job that was automatically triggered with your pushed changes. Wait until all stages of the job are completed.</p> <p></p> </li> <li> <p>Click Job number from the left-side list, and then click <code>Console Output</code>.</p> <p>This could be <code>#2</code> or <code>#3</code>, for example. </p> <p> </p> <p>The log for the job will appear.</p> </li> <li> <p>Look through the job log to see the actions that were performed.</p> <p> </p> </li> <li> <p>Navigate back to the GitLab tab in your browser and refresh it.</p> <p> </p> <p>You should see a few changes. - a new commit with a green check mark, and - a new <code>refactor</code> folder that was not present before</p> </li> <li> <p>Open the <code>refactor</code> folder in the GitLab browser page, then open the <code>cobol</code> sub-folder.</p> <p>The <code>LGACDB01</code> code will now be present.</p> <p> </p> </li> <li> <p>Navigate back to VSCode</p> </li> <li> <p>Right click the <code>LGACDB01.cbl</code> file, hover over <code>watsonx Code Assistant for Z</code>, and select <code>Select COBOL for transformation</code>. </p> <p> </p> <p>Note: the same task can be performed by selecting the <code>Import COBOL</code> button in the bottom-left corner of VSCode under the <code>IBM WATSONX CODE ASSISTANT FOR Z</code> section.</p> <p>Either way, the <code>LGACDB01.cbl</code> file should now be present in the <code>IBM WATSONX CODE ASSISTANT FOR Z</code> section in the bottom-left of VSCode.</p> </li> <li> <p>Click the icon next to <code>LGACDB01.cbl</code> to <code>Generate Java classes</code>.</p> <p> </p> <p>A new input bar will appear in the top-middle of VSCode, prompting you for a Java directory,</p> </li> <li> <p>Select <code>Input absolute path</code>, and add the following to the end of the default path: <code>\\src\\main\\java</code>.</p> <p>The absolute path should be the following:</p> <p><code>c:\\Users\\Administrator\\Desktop\\WCA4Z Lab Data\\COBOLJavaBatch\\src\\main\\java</code></p> <p> </p> </li> <li> <p>Press enter.</p> <p>A new tab for <code>Java Class design</code> should open.</p> <p> </p> </li> <li> <p>Optionally expand the different artifacts using the down arrows. Keep all of the default values.</p> </li> <li> <p>At the bottom-right of <code>Java Class design</code> tab, click Generate Java classes.</p> <p> </p> </li> <li> <p>In the left-side menu of VSCode, navigate to the <code>src\\main\\com\\ibm\\wcaz</code> folder to see the list of generated Java classes.</p> <p> </p> </li> <li> <p>From this folder, open the file named <code>Lgacdb01.java</code>.</p> <p> </p> <p>A new section named <code>JAVA PROJECTS</code> will appear at the bottom-left of VSCode the Java projects will be generated.</p> <p> </p> <p>You may need to expand the <code>JAVA PROJECTS</code> section to see the projects.</p> <p>The Java classes and method names can be found in the <code>refactor\\cobol</code> folder in the <code>IBM WATSONX CODE ASSISTANT FOR Z</code> section. </p> <p> </p> <p>You may need to expand the <code>IBM WATSONX CODE ASSISTANT FOR Z</code> section to see the classes and methods.</p> </li> <li> <p>In the <code>refactor\\cobol</code> folder, open the method named <code>insertCustomer</code>.</p> <p> </p> </li> <li> <p>In the <code>refactor\\cobol</code> folder, click the icon next to the <code>insertCustomer</code> filename to generate the Java method.</p> <p> </p> </li> <li> <p>After the Java method gets generated in the right-side panel, click the <code>Insert</code> button. </p> <p> </p> <p>The generated java method for <code>insertCustomer</code> will be inserted in the Java class.</p> <p> </p> </li> <li> <p>Repeat this process for the <code>writeErrorMessage</code> function.</p> <p></p> <p></p> <p></p> </li> </ol> <p>In this Transform phase,</p> <ol> <li>We used the workbook <code>LGACDB01</code> from Refactor phase for <code>INSERT-CUSTOMER</code> functionality.</li> <li>We generated Java classes and Java methods for the <code>INSERT-CUSTOMER</code> service.</li> </ol>"},{"location":"labs/understand/","title":"Understand Phase","text":""},{"location":"labs/understand/#configuring-the-refactoring-assistant","title":"Configuring the Refactoring Assistant","text":"<ol> <li> <p>Log in to your IBM Z Virtual Access (zVA) environment.</p> <p>You should have been provided access to an environment ahead of time. If you are not sure how to access your environment, please ask your lab instructor for help.</p> <p></p> </li> <li> <p>In the zVA browser, open PuTTY from the taskbar.</p> <p></p> </li> <li> <p>In the list of PuTTY's Saved Sessions, select <code>wca4z-ra</code> and click Open.</p> <p></p> </li> <li> <p>After clicking Open, you will receive a security warning. Select Accept.</p> <p></p> <p>This warning should only appear the first time you load the <code>wca4z-ra</code> session.</p> <p>Scripts will automatically run in the PuTTY session to start the Refactoring Assistant.</p> </li> <li> <p>Once you receive the message <code>IBM watsonx Code Assistant for Z Refactoring Assistant started</code> in the PuTTY console, you can close PuTTY.</p> <p></p> </li> </ol>"},{"location":"labs/understand/#understanding-genapp","title":"Understanding GenApp","text":"<p>In this lab, you will be using the sample application GenApp. The general insurance application is a working CICS-COBOL application simulates transactions made by an insurance company to create and manage its customers and insurance policies.</p> <p>You can read more about GenApp here and its architecture here.</p> <ol> <li> <p>In the zVA browser, open IBM Developer for z/OS (Idz) from the taskbar.</p> <p></p> </li> <li> <p>You may be prompted to select a directory as a workspace. If you receive this, leave the default workspace path and click launch.</p> <p>The correct workspace path should be: </p> <pre><code>C:\\Users\\Administrator\\.zosexplorer\n</code></pre> <p></p> <p>The launcher window will close, and IDz will launch the z/OS Explorer workspace. </p> <p>Please be patient. This can take a minute or two to fully load.</p> </li> <li> <p>Once you see the Explore projects tab, right-click on the empty list of projects and click Get Project List.</p> <p></p> <p>The GenApp project will appear.</p> <p></p> </li> <li> <p>Click the GenApp project to highlight it, then double-click Program Callgraph in the new pane that appears on the right side of the page.</p> <p></p> </li> <li> <p>A new window will appear where you can select which programs to analyze. Click the double arrow button to move all of the programs from Available programs to Selected programs, then click Finish.</p> <p></p> <p>Please be patient. This can take a minute or two to fully load.</p> <p>When loaded, you will see a call graph for all programs, CICS transactions, and tables, and other files in the GenApp application and the interdependencies between them.</p> <p></p> <p>This is an interactive chart. You can zoom in and scroll around the graph to see different objects. You can also right-click the objects to see more specific details about them.</p> </li> <li> <p>In the left-side of the page, you will see a Graph Inventory. Notice that the CICS transactions, COBOL Programs, and different object types have been identified. Expand the COBOL Programs section to see the list of 37 COBOL programs that are part of GenApp.</p> <p></p> </li> <li> <p>In the Graph Inventory, expand the CICS Transactions section to see the 6 CICS transactions that are part of GenApp and find the one named <code>SSC1</code>.</p> <p></p> </li> <li> <p>Right-click <code>SSC</code>, hover over Mainframe Graphs, and select Transaction Callgraph.</p> <p></p> </li> <li> <p>Leave the default options and click Finish.</p> <p></p> <p>A new callgraph will be generated that is scoped to only the objects in the application flow that follow the CICS transaction.</p> <p></p> <p>At the bottom of this graph, you will notice a COBOL program named <code>LGACDB01</code> that accesses a SQL table named <code>CUSTOMER</code>. </p> </li> <li> <p>Right-click on the COBOL program named <code>LGACDB01</code> to open a new panel at the bottom with the COBOL code. Maximize the code by clicking the button in the top-right of the panel.</p> <p></p> <p>The COBOL program <code>LGACDB01</code> should now be maximized.</p> <p></p> </li> <li> <p>Scroll down to line 242 in the COBOL code until you find the <code>INSERT-CUSTOMER</code> paragraph. </p> <p></p> <p>Hint: You can check the line you're on using the first number pointed out in the image above.</p> <p>The <code>INSERT-CUSTOMER</code> paragraph is one small part of the overall GenApp sample application. It is responsible for inserting customer data into the SQL table and if this fails, there is a separate paragraph named <code>WRITE-ERROR-MESSAGE</code> that is executed.</p> <p>In the following sections, you will refactor and transform these two paragraphs into Java.</p> </li> </ol> <p>In the Understand phase,</p> <ol> <li>We selected the <code>SSC1</code> transaction to understand its flow and related components.</li> <li>We explored the data access program <code>LGACDB01</code> and the <code>INSERT-CUSTOMER</code> paragraph.</li> </ol>"},{"location":"labs/validate/","title":"Validate Phase","text":""}]}